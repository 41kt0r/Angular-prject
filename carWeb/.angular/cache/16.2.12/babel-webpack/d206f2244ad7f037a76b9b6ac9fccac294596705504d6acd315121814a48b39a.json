{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let EditComponent = class EditComponent {\n  constructor(EpisodeService, titleService, router, route) {\n    this.EpisodeService = EpisodeService;\n    this.titleService = titleService;\n    this.router = router;\n    this.route = route;\n  }\n  ngOnInit() {\n    this.titleService.setTitle('Edit Page');\n    const episodeId = this.route.snapshot.params['episodeId'];\n    this.subscribe$ = this.EpisodeService.getEpisodeById(episodeId).subscribe({\n      next: episodeInfo => this.episode = episodeInfo,\n      error: error => this.errorMessage = error.error.message\n    });\n  }\n  editHandler(formData) {\n    const episodeId = this.route.snapshot.params['episodeId'];\n    this.subscribe$ = this.EpisodeService.editEpisode(episodeId, formData.value).subscribe({\n      error: error => {\n        if (error.message.includes('Unknown Error')) {\n          this.errorMessage = 'Server not connected!';\n        } else {\n          this.errorMessage = error.error.message;\n        }\n      },\n      complete: () => this.router.navigate(['/episodes', 'details', `${episodeId}`])\n    });\n  }\n  ngOnDestroy() {\n    if (this.subscribe$ != undefined) {\n      this.subscribe$.unsubscribe();\n    }\n  }\n};\nEditComponent = __decorate([Component({\n  selector: 'app-edit',\n  templateUrl: './edit.component.html',\n  styleUrls: ['./edit.component.css']\n})], EditComponent);","map":{"version":3,"names":["Component","EditComponent","constructor","EpisodeService","titleService","router","route","ngOnInit","setTitle","episodeId","snapshot","params","subscribe$","getEpisodeById","subscribe","next","episodeInfo","episode","error","errorMessage","message","editHandler","formData","editEpisode","value","includes","complete","navigate","ngOnDestroy","undefined","unsubscribe","__decorate","selector","templateUrl","styleUrls"],"sources":["D:\\SoftUni\\Angular pj\\car-web\\src\\app\\features\\posts\\edit\\edit.component.ts"],"sourcesContent":["import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { Title } from '@angular/platform-browser';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { Subscription } from 'rxjs';\n\nimport { PostInterface } from 'src/app/core/interfaces/Post';\nimport { PostsService } from 'src/app/core/services/posts.service';\n\n@Component({\n  selector: 'app-edit',\n  templateUrl: './edit.component.html',\n  styleUrls: ['./edit.component.css']\n})\nexport class EditComponent implements OnInit, OnDestroy {\n\n  episode!: EpisodeInterface;\n  subscribe$!: Subscription;\n  errorMessage!: string;\n\n  constructor(\n    private EpisodeService: EpisodeService,\n    private titleService: Title,\n    private router: Router,\n    private route: ActivatedRoute\n  ) {}\n\n  ngOnInit(): void {\n    this.titleService.setTitle('Edit Page');\n    const episodeId = this.route.snapshot.params['episodeId'];\n    this.subscribe$ = this.EpisodeService.getEpisodeById(episodeId).subscribe({\n      next: (episodeInfo) => this.episode = episodeInfo,\n      error: (error) => this.errorMessage = error.error.message\n    });\n  }\n\n  editHandler(formData: NgForm) {\n    const episodeId = this.route.snapshot.params['episodeId'];\n\n    this.subscribe$ = this.EpisodeService.editEpisode(episodeId, formData.value).subscribe({\n      error: (error) => {\n        if (error.message.includes('Unknown Error')) {\n          this.errorMessage = 'Server not connected!'\n        } else {\n          this.errorMessage = error.error.message;\n        }\n      },\n      complete: () => this.router.navigate([ '/episodes', 'details', `${episodeId}`])\n    });\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscribe$ != undefined) {\n      this.subscribe$.unsubscribe();\n    }\n  }\n\n\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAA2B,eAAe;AAcrD,WAAMC,aAAa,GAAnB,MAAMA,aAAa;EAMxBC,YACUC,cAA8B,EAC9BC,YAAmB,EACnBC,MAAc,EACdC,KAAqB;IAHrB,KAAAH,cAAc,GAAdA,cAAc;IACd,KAAAC,YAAY,GAAZA,YAAY;IACZ,KAAAC,MAAM,GAANA,MAAM;IACN,KAAAC,KAAK,GAALA,KAAK;EACZ;EAEHC,QAAQA,CAAA;IACN,IAAI,CAACH,YAAY,CAACI,QAAQ,CAAC,WAAW,CAAC;IACvC,MAAMC,SAAS,GAAG,IAAI,CAACH,KAAK,CAACI,QAAQ,CAACC,MAAM,CAAC,WAAW,CAAC;IACzD,IAAI,CAACC,UAAU,GAAG,IAAI,CAACT,cAAc,CAACU,cAAc,CAACJ,SAAS,CAAC,CAACK,SAAS,CAAC;MACxEC,IAAI,EAAGC,WAAW,IAAK,IAAI,CAACC,OAAO,GAAGD,WAAW;MACjDE,KAAK,EAAGA,KAAK,IAAK,IAAI,CAACC,YAAY,GAAGD,KAAK,CAACA,KAAK,CAACE;KACnD,CAAC;EACJ;EAEAC,WAAWA,CAACC,QAAgB;IAC1B,MAAMb,SAAS,GAAG,IAAI,CAACH,KAAK,CAACI,QAAQ,CAACC,MAAM,CAAC,WAAW,CAAC;IAEzD,IAAI,CAACC,UAAU,GAAG,IAAI,CAACT,cAAc,CAACoB,WAAW,CAACd,SAAS,EAAEa,QAAQ,CAACE,KAAK,CAAC,CAACV,SAAS,CAAC;MACrFI,KAAK,EAAGA,KAAK,IAAI;QACf,IAAIA,KAAK,CAACE,OAAO,CAACK,QAAQ,CAAC,eAAe,CAAC,EAAE;UAC3C,IAAI,CAACN,YAAY,GAAG,uBAAuB;SAC5C,MAAM;UACL,IAAI,CAACA,YAAY,GAAGD,KAAK,CAACA,KAAK,CAACE,OAAO;;MAE3C,CAAC;MACDM,QAAQ,EAAEA,CAAA,KAAM,IAAI,CAACrB,MAAM,CAACsB,QAAQ,CAAC,CAAE,WAAW,EAAE,SAAS,EAAE,GAAGlB,SAAS,EAAE,CAAC;KAC/E,CAAC;EACJ;EAEAmB,WAAWA,CAAA;IACT,IAAI,IAAI,CAAChB,UAAU,IAAIiB,SAAS,EAAE;MAChC,IAAI,CAACjB,UAAU,CAACkB,WAAW,EAAE;;EAEjC;CAGD;AA5CY7B,aAAa,GAAA8B,UAAA,EALzB/B,SAAS,CAAC;EACTgC,QAAQ,EAAE,UAAU;EACpBC,WAAW,EAAE,uBAAuB;EACpCC,SAAS,EAAE,CAAC,sBAAsB;CACnC,CAAC,C,EACWjC,aAAa,CA4CzB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}