{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let CreateComponent = class CreateComponent {\n  constructor(PostsService, titleService, router, authService) {\n    this.PostsService = PostsService;\n    this.titleService = titleService;\n    this.router = router;\n    this.authService = authService;\n  }\n  ngOnInit() {\n    this.titleService.setTitle('Create');\n  }\n  createMethod(formData) {\n    const userId = this.authService.getUserData()?._id;\n    const userInput = formData.value;\n    userInput._ownerId = userId;\n    this.PostsService.getAllPosts().subscribe({\n      next: posts => {\n        const postExists = posts.some(post => post.model === userInput.model);\n        if (postExists) {\n          this.errorMessage = 'Post with this name already exists.';\n        } else {\n          this.subscribe = this.PostsService.addPost(userInput).subscribe({\n            next: () => this.router.navigate(['/catalog']),\n            error: error => this.errorMessage = error.error.message\n          });\n        }\n      },\n      error: error => {\n        if (error.message.includes('Unknown Error')) {\n          this.errorMessage = 'Server not connected!';\n        } else {\n          this.errorMessage = error.error.message;\n        }\n      }\n    });\n  }\n  ngOnDestroy() {\n    if (this.subscribe != undefined) {\n      this.subscribe.unsubscribe();\n    }\n  }\n};\nCreateComponent = __decorate([Component({\n  selector: 'app-create',\n  templateUrl: './create.component.html',\n  styleUrls: ['./create.component.css']\n})], CreateComponent);","map":{"version":3,"names":["Component","CreateComponent","constructor","PostsService","titleService","router","authService","ngOnInit","setTitle","createMethod","formData","userId","getUserData","_id","userInput","value","_ownerId","getAllPosts","subscribe","next","posts","postExists","some","post","model","errorMessage","addPost","navigate","error","message","includes","ngOnDestroy","undefined","unsubscribe","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\vikoa\\OneDrive\\Работен плот\\Angular prject\\carWeb\\src\\app\\features\\posts\\create\\create.component.ts"],"sourcesContent":["import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { Title } from '@angular/platform-browser';\nimport { Router } from '@angular/router';\nimport { Subscription } from 'rxjs';\n\nimport { PostInterface } from 'src/app/core/interfaces/Post';\nimport { AuthService } from 'src/app/core/services/auth.service';\nimport { PostsService } from 'src/app/core/services/posts.service';\n\n@Component({\n  selector: 'app-create',\n  templateUrl: './create.component.html',\n  styleUrls: ['./create.component.css']\n})\nexport class CreateComponent implements OnInit, OnDestroy {\n  subscribe!: Subscription;\n  errorMessage!: string;\n\n  constructor(private PostsService: PostsService, private titleService: Title, private router: Router, private authService: AuthService) { }\n\n  ngOnInit(): void {\n    this.titleService.setTitle('Create');\n  }\n\n  createMethod(formData: NgForm) {\n    const userId = this.authService.getUserData()?._id;\n    const userInput = formData.value;\n    userInput._ownerId = userId;\n\n    this.PostsService.getAllPosts().subscribe({\n      next: (posts: PostInterface[]) => {\n\n        const postExists = posts.some(post => post.model === userInput.model);\n        if (postExists) {\n          this.errorMessage = 'Post with this name already exists.';\n        } else {\n          this.subscribe = this.PostsService.addPost(userInput).subscribe({\n            next: () => this.router.navigate(['/catalog']),\n            error: (error) => this.errorMessage = error.error.message,\n          });\n        }\n      },\n      error: (error) => {\n        if (error.message.includes('Unknown Error')) {\n          this.errorMessage = 'Server not connected!'\n        } else {\n          this.errorMessage = error.error.message;\n        }\n      }\n      });\n}\nngOnDestroy(): void {\n  if(this.subscribe != undefined) {\n  this.subscribe.unsubscribe();\n}\n  }\n}"],"mappings":";AAAA,SAASA,SAAS,QAA2B,eAAe;AAerD,WAAMC,eAAe,GAArB,MAAMA,eAAe;EAI1BC,YAAoBC,YAA0B,EAAUC,YAAmB,EAAUC,MAAc,EAAUC,WAAwB;IAAjH,KAAAH,YAAY,GAAZA,YAAY;IAAwB,KAAAC,YAAY,GAAZA,YAAY;IAAiB,KAAAC,MAAM,GAANA,MAAM;IAAkB,KAAAC,WAAW,GAAXA,WAAW;EAAiB;EAEzIC,QAAQA,CAAA;IACN,IAAI,CAACH,YAAY,CAACI,QAAQ,CAAC,QAAQ,CAAC;EACtC;EAEAC,YAAYA,CAACC,QAAgB;IAC3B,MAAMC,MAAM,GAAG,IAAI,CAACL,WAAW,CAACM,WAAW,EAAE,EAAEC,GAAG;IAClD,MAAMC,SAAS,GAAGJ,QAAQ,CAACK,KAAK;IAChCD,SAAS,CAACE,QAAQ,GAAGL,MAAM;IAE3B,IAAI,CAACR,YAAY,CAACc,WAAW,EAAE,CAACC,SAAS,CAAC;MACxCC,IAAI,EAAGC,KAAsB,IAAI;QAE/B,MAAMC,UAAU,GAAGD,KAAK,CAACE,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACC,KAAK,KAAKV,SAAS,CAACU,KAAK,CAAC;QACrE,IAAIH,UAAU,EAAE;UACd,IAAI,CAACI,YAAY,GAAG,qCAAqC;SAC1D,MAAM;UACL,IAAI,CAACP,SAAS,GAAG,IAAI,CAACf,YAAY,CAACuB,OAAO,CAACZ,SAAS,CAAC,CAACI,SAAS,CAAC;YAC9DC,IAAI,EAAEA,CAAA,KAAM,IAAI,CAACd,MAAM,CAACsB,QAAQ,CAAC,CAAC,UAAU,CAAC,CAAC;YAC9CC,KAAK,EAAGA,KAAK,IAAK,IAAI,CAACH,YAAY,GAAGG,KAAK,CAACA,KAAK,CAACC;WACnD,CAAC;;MAEN,CAAC;MACDD,KAAK,EAAGA,KAAK,IAAI;QACf,IAAIA,KAAK,CAACC,OAAO,CAACC,QAAQ,CAAC,eAAe,CAAC,EAAE;UAC3C,IAAI,CAACL,YAAY,GAAG,uBAAuB;SAC5C,MAAM;UACL,IAAI,CAACA,YAAY,GAAGG,KAAK,CAACA,KAAK,CAACC,OAAO;;MAE3C;KACC,CAAC;EACR;EACAE,WAAWA,CAAA;IACT,IAAG,IAAI,CAACb,SAAS,IAAIc,SAAS,EAAE;MAChC,IAAI,CAACd,SAAS,CAACe,WAAW,EAAE;;EAE5B;CACD;AA1CYhC,eAAe,GAAAiC,UAAA,EAL3BlC,SAAS,CAAC;EACTmC,QAAQ,EAAE,YAAY;EACtBC,WAAW,EAAE,yBAAyB;EACtCC,SAAS,EAAE,CAAC,wBAAwB;CACrC,CAAC,C,EACWpC,eAAe,CA0C3B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}