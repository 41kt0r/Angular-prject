{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth.service\";\nexport class RequestInterceptor {\n  constructor(authService) {\n    this.authService = authService;\n  }\n  intercept(request, next) {\n    const accessToken = this.authService.getUserData()?.accessToken;\n    if (accessToken) {\n      request = request.clone({\n        setHeaders: {\n          'X-Authorization': accessToken\n        }\n      });\n    }\n    request = request.clone({\n      setHeaders: {\n        'Content-Type': 'application/json'\n      }\n    });\n    return next.handle(request);\n  }\n  static #_ = this.ɵfac = function RequestInterceptor_Factory(t) {\n    return new (t || RequestInterceptor)(i0.ɵɵinject(i1.AuthService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: RequestInterceptor,\n    factory: RequestInterceptor.ɵfac\n  });\n}","map":{"version":3,"names":["RequestInterceptor","constructor","authService","intercept","request","next","accessToken","getUserData","clone","setHeaders","handle","_","i0","ɵɵinject","i1","AuthService","_2","factory","ɵfac"],"sources":["D:\\SoftUni\\Car-Web Angular project\\car-web\\src\\app\\core\\interceptor\\request.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HttpRequest, HttpHandler, HttpEvent, HttpInterceptor } from '@angular/common/http';\n\nimport { AuthService } from '../services/auth.service';\n\n\n\n@Injectable()\nexport class RequestInterceptor implements HttpInterceptor {\n  constructor(private authService: AuthService) {}\n\n  intercept( request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n    const accessToken = this.authService.getUserData()?.accessToken;\n    if (accessToken) {\n      request = request.clone({\n        setHeaders: {\n          'X-Authorization': accessToken,\n        }\n      });\n    }\n\n    request = request.clone({\n      setHeaders: {\n        'Content-Type': 'application/json',\n      },\n    });\n\n    return next.handle(request);\n  }\n}"],"mappings":";;AASA,OAAM,MAAOA,kBAAkB;EAC7BC,YAAoBC,WAAwB;IAAxB,KAAAA,WAAW,GAAXA,WAAW;EAAgB;EAE/CC,SAASA,CAAEC,OAA6B,EAAEC,IAAiB;IACzD,MAAMC,WAAW,GAAG,IAAI,CAACJ,WAAW,CAACK,WAAW,EAAE,EAAED,WAAW;IAC/D,IAAIA,WAAW,EAAE;MACfF,OAAO,GAAGA,OAAO,CAACI,KAAK,CAAC;QACtBC,UAAU,EAAE;UACV,iBAAiB,EAAEH;;OAEtB,CAAC;;IAGJF,OAAO,GAAGA,OAAO,CAACI,KAAK,CAAC;MACtBC,UAAU,EAAE;QACV,cAAc,EAAE;;KAEnB,CAAC;IAEF,OAAOJ,IAAI,CAACK,MAAM,CAACN,OAAO,CAAC;EAC7B;EAAC,QAAAO,CAAA,G;qBApBUX,kBAAkB,EAAAY,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAlBhB,kBAAkB;IAAAiB,OAAA,EAAlBjB,kBAAkB,CAAAkB;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}